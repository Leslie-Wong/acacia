<template>
    <Head>
        <title>$JS_INDEX_TITLE$</title>
    </Head>
    <Backend>
        <template #header>
            <h4 class="font-black text-2xl px-1 md:px-4">$JS_INDEX_TITLE$</h4>
        </template>
        <div class="mx-auto flex container items-center justify-center mt-4">
            <div class="rounded w-full p-2 bg-white">
                <PrimeDatatables
                    :api-url="apiUrl"
                    :column-filters="{}"
                    :searchable-columns="searchableCols"
                    :state-key="stateKey"
                    contextMenu
                    v-model:contextMenuSelection="selectedRow"
                    @row-contextmenu="showContextMenu"
                    :row-hover="true"
                    :refresh="refreshTime"
                >
                    $JS_INDEX_COLUMNS$
                    <Column>
                        <template #body="props">
                            <Button class=""
                                    @click="toggleOptions($event, props.data)"
                                    icon-pos="right"
                                    :class="'p-button-text'"
                                    :icon="'pi pi-ellipsis-v'"
                                    :label="'Actions'"
                            />
                        </template>
                    </Column>
                </PrimeDatatables>
            </div>
        </div>
        <ContextMenu ref="contextMenu" :model="options"/>
    </Backend>
</template>

<script lang="ts">
    import {defineComponent} from "vue";

    export default defineComponent({
        name: "$STUDLY_NAME$Index"
    })
</script>
<script lang="ts" setup>
    import Head from "@inertiajs/inertia-vue3"
    import Backend from "@Acacia/Core/Js/Layouts/Backend.vue"
    import PrimeDatatables from "@Acacia/Core/Js/Components/PrimeDatatables.vue";
    import Column from "primevue/column";
    import Button from "primevue/button";
    import ContextMenu from "primevue/contextmenu";
    import Badge from "primevue/badge";
    import route from "ziggy-js"
    import {nextTick, Ref, ref} from "vue";
    import {useConfirm} from "primevue/useconfirm";
    import {useToast} from "primevue/usetoast";
    import {Inertia} from "@inertiajs/inertia";
    import axios from "axios";

    const apiUrl = route('api.v1.$LOWER_NAME$.dt');
    const stateKey = '$LOWER_NAME$-dt'
    const searchableCols = ref($JS_INDEX_SEARCHABLE_COLS$);
    const selectedRow = ref(null) as Ref<any>;
    const contextMenu = ref();
    const options = ref([]) as Ref<any>;
    const confirm = useConfirm();
    const toast = useToast();
    const refreshTime = ref(null) as Ref<string | null>;
    const makeOptionsMenu = (row) => [
        {
            label: "Manage",
            icon: "pi pi-pencil",
            command: () => Inertia.get(route('acacia.backend.$LOWER_NAME$.edit', row)),
            visible: () => true,
        },
        {
            label: "Delete",
            icon: "pi pi-trash",
            command: () => {
                confirm.require({
                    message: "Are you sure you want to delete this record?",
                    header: "Confirm Deletion",
                    accept: () => deleteModel(row)
                })
            },
            visible: () => true,
        },
    ];
    const refresh = () => {
        refreshTime.value = new Date().toUTCString();
    }
    const toggleOptions = async (e, row) => {
        options.value = makeOptionsMenu(row);
        await nextTick();
        contextMenu.value.show(e);
    }
    const showContextMenu = async (e) => {
        options.value = makeOptionsMenu(e.data);
        await nextTick();
        contextMenu.value.show(e.originalEvent);
    }
    const deleteModel = async function (row) {
        try {
            const res = await axios.delete(route('api.v1.$LOWER_NAME$.destroy', row as any));
            toast.add({severity: 'success', detail: res.data.message});
            refresh();
        } catch (e: any) {
            console.log(e);
            const msg = e?.response?.data?.message || e?.data?.message || e?.message || e || "Server error";
            toast.add({severity: 'error', detail: msg, summary: 'Server Error'});
        }
    }
</script>

<style scoped>

</style>
